import unreal
import re
import os

print("Regenerating RPGGameplayTags.h")
file_location = "{}ActionRPG\Public\RPGGameplayTags.h".format(unreal.Paths.game_source_dir())

gtag_set = set()

def fill_gtag_set(gtag):
    if(gtag not in gtag_set):
        gtag_set.add(gtag)
    split_tag_array = gtag.rsplit(".", 1)
    if(len(split_tag_array)>1):
        fill_gtag_set(split_tag_array[0])

# force file to be writeable in workspace (we'll try to check it out from P4 at the end of this script)
os.chmod(file_location, 0o755)
with open(file_location, "w") as f:
    f.write("// (c) 2022 Long Ly. All rights reserved.\n\n")
    f.write("#pragma once\n\n")

    f.write("/* **************************************************/\n")
    f.write("/* DO NOT EDIT THIS FILE MANUALLY!                  */\n")
    f.write("/* **************************************************/\n")
    f.write("/* This file is autogenerated by a python script.   */\n")          
    f.write("/* See: gameplaytags_to_cpp.py                      */\n")
    f.write("/* **************************************************/\n")
    f.write("/* DO NOT EDIT THIS FILE MANUALLY!                  */\n")
    f.write("/* **************************************************/\n")
    f.write("\n")

    gameplay_tags_container = unreal.RPGGameplayBPLibrary.request_all_gameplay_tags(True)
    for gtag in gameplay_tags_container.gameplay_tags:
        gtag_string = unreal.StringLibrary.conv_name_to_string(gtag.get_editor_property("tag_name"))
        fill_gtag_set(gtag_string)

    sorted_tags = sorted(gtag_set, key=lambda s: s.lower())
    for gtag_string in sorted_tags:
        tag_sanitized_name = re.sub("\.", "_", gtag_string)
        as_macro = "#define GTag_{} TEXT(\"{}\")".format(tag_sanitized_name, gtag_string)
        # print as_macro
        f.write(as_macro + "\n")


# checking out can be slow and fail if P4 is not working
# try checking out after the file has been successfully written to disk
# if unreal.SourceControl.is_enabled() and unreal.SourceControl.is_available():
#     has_checked_out_file = unreal.SourceControl.check_out_or_add_file(file_location)
#     if(not has_checked_out_file):
#         unreal.log_warning("Is Perforce down? Failed to check out file: {}".format(file_location))